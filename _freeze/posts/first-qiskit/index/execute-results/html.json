{
  "hash": "6680bfbb860cf9e3776f06a61cf035cd",
  "result": {
    "markdown": "---\ntitle: 'Qiskit: getting started'\nauthor: Jonny Comes\ndate: '2022-11-28'\ncategories:\n  - quantum\n  - qiskit\nimage: circuit.png\ndraft: false\ntoc: true\n---\n\nQiskit is an open source software development kit (SDK) for working with quantum computation. There are several excellent tutorials for getting started with qiskit, as well as loads of great documentation you can find at [qiskit.org](https://qiskit.org). The following walks through some of the very basics including how to create quantum circuits, simulate measurments, and work with state vectors. \n\n## Creating quantum circuits\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom qiskit import QuantumCircuit\n```\n:::\n\n\nFirst, we create a 3-qubit quantum circuit:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nqc = QuantumCircuit(3)\n```\n:::\n\n\nNext, we add some gates and draw the resulting circuit:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nqc.x(0)\nqc.h(2)\nqc.cx(0,2)\nqc.cx(1,2)\nqc.draw(output='mpl')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](index_files/figure-html/cell-4-output-1.png){width=288 height=225}\n:::\n:::\n\n\n## Measurements\n\nWe can simulate a measurement, but first we need to import a simulator:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom qiskit.providers.aer import QasmSimulator\n\nsimulator = QasmSimulator()\n```\n:::\n\n\n### Measure using a classical register explicitly \n\nOne way to measure is to use a circuit having both a quantum and classical register:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ncircuit = QuantumCircuit(3, 3)\n```\n:::\n\n\nNow, let's add some gates including some measuments:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ncircuit.h(0)\ncircuit.cx(0, 1)\ncircuit.cx(0, 2)\ncircuit.measure([0,1,2], [0,1,2])\ncircuit.draw(output='mpl')\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](index_files/figure-html/cell-7-output-1.png){width=470 height=286}\n:::\n:::\n\n\nNext, we simulate and count the results:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\njob = simulator.run(circuit, shots=1000)\nresult = job.result()\ncounts = result.get_counts(circuit)\nprint(counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'000': 469, '111': 531}\n```\n:::\n:::\n\n\nWe can plot the results using qiskits built in visualization:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfrom qiskit.visualization import plot_histogram\n\nplot_histogram(counts)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](index_files/figure-html/cell-9-output-1.png){width=608 height=431}\n:::\n:::\n\n\n### Using the ``measure_all()`` method\n\nAlternatively, if we want to measure all the qubits we can use the ``measure_all()`` method:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ncircuit = QuantumCircuit(3)\n```\n:::\n\n\nNow, let's add some gates including some measuments:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ncircuit.h(0)\ncircuit.cx(0, 1)\ncircuit.cx(0, 2)\ncircuit.measure_all()\ncircuit.draw(output='mpl')\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](index_files/figure-html/cell-11-output-1.png){width=561 height=286}\n:::\n:::\n\n\nWe should see similar results:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\njob = simulator.run(circuit, shots=1000)\nresult = job.result()\ncounts = result.get_counts(circuit)\nprint(counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'000': 490, '111': 510}\n```\n:::\n:::\n\n\nOf course, this will only work if we want to measure all the qubits in the output state of the circuit. \n\n## Circuit orientation\n\nQiskit orients circuits so that the qubits $q_0, q_1,\\ldots, q_{n-1}$ labelling the circut from top to bottom correspond to the input state $|q_{n-1}\\cdots q_1q_0\\rangle$. To see this, let's create a simple gate that maps $|000\\rangle\\mapsto|100\\rangle$. \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ncirc = QuantumCircuit(3)\ncirc.x(2)\ncirc.measure_all()\ncirc.draw(output='mpl')\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](index_files/figure-html/cell-13-output-1.png){width=440 height=286}\n:::\n:::\n\n\nTo see that the circuit above does the trick, let's measure:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\njob = simulator.run(circ, shots=1000)\nresult = job.result()\ncounts = result.get_counts(circ)\nprint(counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'100': 1000}\n```\n:::\n:::\n\n\nI prefer the flipped orientation where the top qubit in the circuit corresponds to the left qubit in the tensor product. To have qiskit draw circuits with my prefered orientation, we simply pass ``reverse_bits=True`` to the ``draw()`` method:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ncirc.draw(output='mpl', reverse_bits=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](index_files/figure-html/cell-15-output-1.png){width=453 height=407}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\njob = simulator.run(circ, shots=1000)\nresult = job.result()\ncounts = result.get_counts(circ)\nprint(counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'100': 1000}\n```\n:::\n:::\n\n\n## State vectors and Bloch spheres\n\nWe can use qiskits ``Statevector`` object work with $n$-qubit states.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfrom qiskit.quantum_info import Statevector\n```\n:::\n\n\n For example, the following creates the state $|7\\rangle$ for a 4-qubit register:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nstate = Statevector.from_int(7, 2**4)\nstate.draw('latex')\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n$$ |0111\\rangle$$\n:::\n:::\n\n\nWe can visualize the state $|7\\rangle$ on a register of Bloch spheres as follows:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nfrom qiskit.visualization import plot_bloch_multivector\n\nplot_bloch_multivector(state, reverse_bits=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](index_files/figure-html/cell-19-output-1.png){width=1210 height=305}\n:::\n:::\n\n\nWe can run this state through a quantum circuit as in the following example:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nqc = QuantumCircuit(4)\nqc.h(1)\nqc.h(2)\nqc.cx(0, 2)\nqc.swap(1,3)\nqc.draw(output='mpl', reverse_bits=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](index_files/figure-html/cell-20-output-1.png){width=288 height=286}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nstate = state.evolve(qc)\nstate.draw('latex')\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n$$- \\frac{1}{2} |0001\\rangle+\\frac{1}{2} |0101\\rangle+\\frac{1}{2} |1001\\rangle- \\frac{1}{2} |1101\\rangle$$\n:::\n:::\n\n\nFinally, let's look at this state using Bloch spheres:\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nplot_bloch_multivector(state, reverse_bits=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n![](index_files/figure-html/cell-22-output-1.png){width=1210 height=305}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}