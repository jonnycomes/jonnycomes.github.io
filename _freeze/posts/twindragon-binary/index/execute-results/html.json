{
  "hash": "e006ff3c5ba61d42a8b5846468e66f8b",
  "result": {
    "markdown": "---\ntitle: Twindragons and a Binary System for Complex Numbers\nauthor: Jonny Comes\ndate: '2023-10-21'\ncategories:\n  - twindragon\n  - number systems\n  - fractals\nimage: twindragon.jpg\nformat:\n  html:\n    code-fold: true\ndraft: false\ntoc: true\ncrossref:\n  eq-prefix: ''\n---\n\n### Standard binary\n\nThis post is not about the standard binary number system, but it's a decent place to start the discussion. In standard binary, every integer is represented by a string of 1's and 0's. To determine which integer is represented by a given string we translate the string into a sum of powers of 2. For example, in the standard binary system $\\textcolor{#17a2b8}{1100}$ represents the integer \n$$\\textcolor{#17a2b8}{1}\\cdot2^3+\\textcolor{#17a2b8}{1}\\cdot2^2+\\textcolor{#17a2b8}{0}\\cdot2^1+\\textcolor{#17a2b8}{0}\\cdot2^0,$$ which (in the standard decimal system) is 12. Since the representation of numbers relies on powers of 2, we say that the standard binary system uses *base 2*.\n\n## The twindragon binary system for complex numbers\n\nThis post is concerned with a (non-standard) binary number system whose base is the complex number $i-1$. We'll see the beautiful fractal known as the *twindragon* showing up when we visualize this number system in the complex plane, so we call this number system the *twindragon binary system*. \n\n### First calculations\n\nLet's look at the same binary string 1100 from above, but this time using the new base of $i-1$. In the twindragon binary system $\\textcolor{#e95420}{1100}$ represents \n$$\\textcolor{#e95420}{1}(i-1)^3+\\textcolor{#e95420}{1}(i-1)^2+\\textcolor{#e95420}{0}(i-1)^1+\\textcolor{#e95420}{0}(i-1)^0.$${#eq-first-twindragon-calc}\nFor another example, in twindragon binary $1111001$ represents \n$$(i-1)^6+(i-1)^5+(i-1)^4+(i-1)^3+(i-1)^0.$${#eq-second-twindragon-calc}\nTo simplify these expressions, it will be useful to know powers of $i-1$. Here are the first several:\n$$\\begin{array}{|c|c|}\n\\hline\nn & (i-1)^n \\\\\n\\hline\n0 & 1 \\\\\n1 & i-1 \\\\ \n2 & -2i \\\\ \n3 & 2+2i \\\\ \n4 & -4 \\\\\n5 & 4-4i \\\\\n6 & 8i \\\\\n7 & -8-8i \\\\\n8 & 16 \\\\\n\\hline\n\\end{array}$$\nUsing these powers we can simplify (@eq-first-twindragon-calc) to see that $\\textcolor{#e95420}{1100}$ is the twindragon binary representation of the integer 2. Simplifying (@eq-second-twindragon-calc) shows us $1111001$ is the twindragon binary representation of the complex number $3+6i$.\n\nNotice that sums of powers of $i-1$ will always result in a [Guassian integer](https://en.wikipedia.org/wiki/Gaussian_integer). In fact, we will soon see that each Guassian integer arises (uniquely) in this way. \n\n### Twindragon representations of units\n\nTowards showing all Guassian integers have a twindragon binary representation, we start with the smallest. \nOf course, the twindragon representation of 0 is merely 0. The next smallest Gaussian integers are the four units: $\\pm 1, \\pm i$. The following table shows the twindragon representations of those units. One can verify the values in the table using the methods above.\n$$\\begin{array}{|c|c|}\n\\hline\n\\text{Gaussian} & \\text{twindragon}  \\\\\n\\text{integer} & \\text{binary} \\\\\n\\hline\n1 & 1 \\\\ \ni & 11 \\\\ \n-i & 111 \\\\\n-1 & 11101 \\\\ \n\\hline\n\\end{array}$${#eq-twindragon-units}\nEvery other Guassian integer is the sum of unit Guassian integers. Since we know how the twindragon represents all the units, to see how to represent an arbitrary Guassian integer it suffices to provide an algorithm for twindragon addition.\n\n## Twindragon addition algorithm\n\nThe addition algorithm for the twindragon binary system is similar to the one using standard binary: stack the binary strings atop one another lining up the rightmost bit, then add bits one by one from right to left with the appropriate carry procedure. There are, however, two key rules for twindragon addition that make the algorithm quite different from the standard one.\n\n### A twindragon carry rule\n\nThe first key difference is the manner in which one \"carries\" bits. In the standard algorithm, one needs to \"carry a 1\" whenever the adding two 1's. This corresponds to the fact that the standard binary representation of 2 (i.e. 1+1) is 10. As we've seen above, the twindragon binary representation of the integer 2 is 1100. Thus we have the following *twindragon carry rule:*\n\n$$\\begin{array}{cr}\n  & 1\\\\\n+ & 1\\\\ \n\\hline\n& 1100\n\\end{array}$${#eq-carry-rule}\n\n This means that when the twindragon adds two 1's it carries both 1's to the positions according to the carry rule (@eq-carry-rule). For example, consider the following sum:\n$$\\begin{array}{cr}\n  & 111001\\\\\n+ & 101010\\\\ \n\\hline\n\\end{array}$$\nStarting from the right, the first three columns of bits are easily handled, leaving us at the following point:\n$$\\begin{array}{cr}\n  & 11\\textcolor{#e95420}{1}\\textcolor{#aea79f}{001}\\\\\n+ & 10\\textcolor{#e95420}{1}\\textcolor{#aea79f}{010}\\\\ \n\\hline\n  & 011\n\\end{array}$$\nNow, we carry the next two 1's according to the carry rule (@eq-carry-rule) leaving us with the following:\n$$\\begin{array}{cr}\n  & \\textcolor{#e95420}{1100}\\phantom{000}\\\\\n  & 11\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}001}\\\\\n+ & 10\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}010}\\\\ \n\\hline\n  & 0011\n\\end{array}$$\nThe next column of bits is easily handled, leaving us in a position where we will have to carry two 1's again:\n$$\\begin{array}{cr}\n  & 1\\textcolor{#e95420}{1}\\textcolor{#aea79f}{00}\\phantom{000}\\\\\n  &  \\textcolor{#e95420}{1}\\textcolor{#aea79f}{11001}\\\\\n+ &   1\\textcolor{#aea79f}{01010}\\\\ \n\\hline\n  & 10011\n\\end{array}$$\nAgain, we carry according to the carry rule (@eq-carry-rule) leaving us with\n$$\\begin{array}{cr}\n  & \\textcolor{#e95420}{1100}\\phantom{00000} \\\\\n  & 1\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}00}\\phantom{000}\\\\\n  &  \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}11001}\\\\\n+ &   \\textcolor{#aea79f}{101010}\\\\ \n\\hline\n  & 110011\n\\end{array}$$\nThe last three columns involve no carries, which gives the final result:\n$$\\begin{array}{cr}\n  & \\textcolor{#aea79f}{1100}\\phantom{00000} \\\\\n  & \\textcolor{#aea79f}{1100}\\phantom{000}\\\\\n  &  \\textcolor{#aea79f}{111001}\\\\\n+ &   \\textcolor{#aea79f}{101010}\\\\ \n\\hline\n  & 111110011\n\\end{array}$$\n\n### A twindragon cancel rule\n\nRecall from (@eq-twindragon-units) that the twindragon representations of $i$ and $-i$ are 11 and 111, respectively. As a consequence, we get the following *twindragon cancel rule:*\n$$\\begin{array}{cr}\n  &  11\\\\\n+ & 111\\\\ \n\\hline\n  &   0\n\\end{array}$${#eq-cancel-rule}\nObserve that the sum in (@eq-cancel-rule) cannot be computed in a finite number of steps using just the carry rule (@eq-carry-rule). Indeed, applying the carry rule to the rightmost bits in the sum above gives the following \n$$\n\\begin{array}{cr}\n  &  1\\textcolor{#e95420}{1}\\\\\n+ & 11\\textcolor{#e95420}{1}\\\\ \n\\hline\n\\end{array}\n\\quad\\leadsto\\quad\n\\begin{array}{cr}\n  & \\textcolor{#e95420}{1100}\\\\\n  &  1\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\\n+ & 11\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\ \n\\hline\n  &   0\n\\end{array}\n$$\nIf we ignore the 0's and drop the top two 1's down a row or two, then we are\nleft with the following:\n$$\\begin{array}{cr}\n  &  11\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\\n+ & 111\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\ \n\\hline\n  &   0\n\\end{array}$$\nComputing the sum of the remaining columns of bits is the same sum we started with. Thus, if we continue then we will get a never-ending sting of 0's as a result (which could be considered correct), but the algorithm never terminates. \n\nIt turns out that the combination of the carry rule (@eq-carry-rule) and cancel rule (@eq-cancel-rule) suffice to compute the sum of any two binary strings in a finite number of steps. \nThe most efficient way is to apply the cancel rule whenever possible. \nHere's an example:\n$$\\begin{array}{cr}\n  & 111011111\\\\\n+ &  10110110\\\\ \n\\hline\n\\end{array}$$\nTo start, note that we can use the cancel rule (@eq-cancel-rule) as follows:\n$$\n\\begin{array}{cr}\n  & 11101\\textcolor{#e95420}{111}1\\\\\n+ &  10110\\textcolor{#e95420}{11}0\\\\ \n\\hline\n\\end{array}\n\\quad\\leadsto\\quad\n\\begin{array}{cr}\n  & 11101\\textcolor{#e95420}{000}1\\\\\n+ &  10110\\textcolor{#e95420}{00}0\\\\ \n\\hline\n\\end{array}\n$$\nNow, we proceed from right to left, and nothing interesting happens (thanks to all the new 0's) until we reach the following point:\n$$\\begin{array}{cr}\n  & 11101\\textcolor{#aea79f}{0001}\\\\\n+ &  1011\\textcolor{#aea79f}{0000}\\\\ \n\\hline\n  & 0001\n\\end{array}$$\nNext, we apply the carry rule (@eq-carry-rule):\n$$\n\\begin{array}{cr}\n\\\\\n  & 1110\\textcolor{#e95420}{1}\\textcolor{#aea79f}{0001}\\\\\n+ &  101\\textcolor{#e95420}{1}\\textcolor{#aea79f}{0000}\\\\ \n\\hline\n  & 0001\n\\end{array}\n\\quad\\leadsto\\quad\n\\begin{array}{cr}\n  &  \\textcolor{#e95420}{1100}\\phantom{0000}\\\\\n  & 1110\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}0001}\\\\\n+ &  101\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}0000}\\\\ \n\\hline\n  & 00001\n\\end{array}\n$$\nNow, we can once again apply the cancel rule (@eq-cancel-rule):\n$$\n\\begin{array}{cr}\n  &  \\textcolor{#e95420}{11}0\\textcolor{#aea79f}{0}\\phantom{0000}\\\\\n  & \\textcolor{#e95420}{111}0\\textcolor{#aea79f}{10001}\\\\\n+ &  101\\textcolor{#aea79f}{10000}\\\\ \n\\hline\n  & 00001\n\\end{array}\n\\quad\\leadsto\\quad\n\\begin{array}{cr}\n  &  \\textcolor{#e95420}{00}0\\textcolor{#aea79f}{0}\\phantom{0000}\\\\\n  & \\textcolor{#e95420}{000}0\\textcolor{#aea79f}{10001}\\\\\n+ &  101\\textcolor{#aea79f}{10000}\\\\ \n\\hline\n  & 00001\n\\end{array}\n$$\nThe rest of the calculation is straightforward, giving the following result:\n$$\\begin{array}{cr}\n  &  \\textcolor{#aea79f}{0000}\\phantom{0000}\\\\\n  &  \\textcolor{#aea79f}{000010001}\\\\\n+ &   \\textcolor{#aea79f}{10110000}\\\\ \n\\hline\n  & 10100001\n\\end{array}$$\n\n### The addition algorithm\n\nAs the example above illustrates, the following algorithm can be used to compute the sum of any finite collection of binary strings in the twindragon binary system:\n\n* Stack the binary strings atop one another in the usual way. \n* Start with the rightmost column of bits.\n* While there are still columns of nonzero bits to add:\n    * Apply the cancel rule as many times as possible.\n    * While there are at least two 1's in the current column:\n        * Apply the carry rule.\n        * Apply the cancel rule if possible.\n    * Add the remaining bits in the column (at most one of which is a 1).\n    * Move one column to the left\n\nThe proof that the algorithm always terminates can be found below.\n\n<details>\n    <summary>Proof</summary>\n    It suffices to prove that the twindragon sum of two binary strings terminates. By adding extra 0's to the left of one string if necessary, we may assume both strings have the same length. Thus, the sum has the following form:\n    $$\\begin{array}{cccccc}\n      &  a_n & \\cdots & a_2 & a_1 & a_0\\\\\n    + &  b_n & \\cdots & b_2 & b_1 & a_0\\\\\n    \\hline\n    \\end{array}$$\n    We proceed by inducting on the number of 1's that need to be added. If at any point we can apply the cancel rule, the number of 1's decreases by five, and we are done by induction. Thus, we may assume it is never possible to apply the cancel rule. Starting on the right, add all the columns that contain only 0's bringing us to a point looking like the following:\n    $$\\begin{array}{cccccc}\n      &  a_n & \\cdots & a_{j+1} & a_j & \\textcolor{#aea79f}{0\\cdots0}\\\\\n    + &  b_n & \\cdots & b_{j+1} & b_j & \\textcolor{#aea79f}{0\\cdots0}\\\\\n    \\hline\n      &&&&& 0\\cdots0\n    \\end{array}$$\n    Where at least one of $a_j$ or $b_j$ is 1. If the other is 0, then we add that column without a carry,  the remaining columns will have one fewer 1, and we are done by induction. Thus we only need to consider the case where both $a_j$ and $b_j$ are 1, and we carry:\n    $$\\begin{array}{ccccccc}\n      &  a_n & \\cdots & a_{j+3} & a_{j+2} & a_{j+1} & \\textcolor{#e95420}{1}~\\textcolor{#aea79f}{0\\cdots0}\\\\\n    + &  b_n & \\cdots & b_{j+3} & b_{j+2} & b_{j+1} & \\textcolor{#e95420}{1}~\\textcolor{#aea79f}{0\\cdots0}\\\\\n    \\hline\n      &&&&&& \\phantom{1~}0\\cdots0\n    \\end{array}$$\n    $$\\begin{array}{ccccccr}\n     &&&\\textcolor{#e95420}{1}&\\textcolor{#e95420}{1}&\\textcolor{#e95420}{0}& \\textcolor{#e95420}{0}~\\phantom{0\\cdots0} \\\\\n      &  a_n & \\cdots & a_{j+3} & a_{j+2} & a_{j+1} &  \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    + &  b_n & \\cdots & b_{j+3} & b_{j+2} & b_{j+1} &  \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    \\hline\n      &&&&&& 0~0\\cdots0\n    \\end{array}$$\n    Now, we may assume $a_{j+1}$ and $b_{j+1}$ are either both 0's or both 1's (else we can add that column, and we're done by induction). In either case, adding the $(j+1)^{\\text{st}}$ column will not contribute any more 1's to the $(j+2)^{\\text{nd}}$ column. Thus we may assume one of $a_{j+2}$ and $b_{j+2}$ is 0 and the other is 1 (else adding the $(j+2)^{\\text{nd}}$ column will result in a 1, and the remaining columns will have one fewer 1, and we're done by induction). Without loss of generality, we may assume $a_{j+2}=1$ and $b_{j+2}=0$, so the sum looks like \n    $$\\begin{array}{ccccccr}\n     &&& 1 & 1 & 0 & \\textcolor{#aea79f}{0}~\\phantom{0\\cdots0} \\\\\n      &  a_n & \\cdots & a_{j+3} & 1 & a_{j+1} &  \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    + &  b_n & \\cdots & b_{j+3} & 0 & b_{j+1} &  \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    \\hline\n      &&&&&& 0~0\\cdots0\n    \\end{array}$$\n    Now, if $a_{j+1}$ and $b_{j+1}$ are both 1's, then we can apply the cancel rule (and we're done by induction), so it suffices to consider the case where they are both 0. Then we add the $(j+1)^{\\text{st}}$ column and we perform a carry on the $(j+2)^{\\text{nd}}$ column:\n    $$\\begin{array}{ccccccr}\n     &&&&& 1 & \\textcolor{#e95420}{1} ~ \\textcolor{#aea79f}{0}~\\textcolor{#aea79f}{0}~\\phantom{0\\cdots0} \\\\\n      &  a_n & \\cdots & a_{j+5} & a_{j+4} & a_{j+3} & \\textcolor{#e95420}{1} ~  \\textcolor{#aea79f}{0~\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    + &  b_n & \\cdots & b_{j+5} & b_{j+4} & b_{j+3} & 0 ~  \\textcolor{#aea79f}{0~\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    \\hline\n      &&&&&& 0~0~0\\cdots0\n    \\end{array}$$\n\n    $$\\begin{array}{ccccccr}\n     & & & \\textcolor{#e95420}{1} & \\textcolor{#e95420}{1} & \\textcolor{#e95420}{0} & \\textcolor{#e95420}{0}\\phantom{~0~0~0\\cdots0}\\\\\n     &&&&& 1 & \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}~0}~\\textcolor{#aea79f}{0}~\\phantom{0\\cdots0} \\\\\n      &  a_n & \\cdots & a_{j+5} & a_{j+4} & a_{j+3} &   \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}~0~\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    + &  b_n & \\cdots & b_{j+5} & b_{j+4} & b_{j+3} &   \\textcolor{#aea79f}{0~0~\\hspace{-5.75pt}\\not{1}~0\\cdots0}\\\\\n    \\hline\n      &&&&&& 0~0~0~0\\cdots0\n    \\end{array}$$\n    Arguing as before, if both $a_{j+3}$ and $b_{j+3}$ are 0, then adding the $(j+3)^{\\text{rd}}$ column will leave us with one fewer 1 (and we'd be done by induction). Thus, we may assume there are two 1's in the $(j+3)^{\\text{rd}}$ column. Since a carry from the $(j+3)^{\\text{rd}}$ column will not contribute a 1 to the $(j+4)^{\\text{th}}$ column, similar reasoning allows us to assume one of $a_{j+4}$ and $b_{j+4}$ is a 1. But now we are in a situation where the $(j+3)^{\\text{rd}}$ and $(j+4)^{\\text{th}}$ columns each have two 1's, and the $(j+5)^{\\text{th}}$ column has a 1. Then we can apply the cancel rule, and we are done by induction.\n\n\n\n</details>\n\n\n## Twindragon representations of **all** Gaussian integers\n\nTo see that every Gaussian integer has a twindragon representation, notice that every Gaussian integer can be written as a sum of the units $\\pm1$ and $\\pm i$. Since we know how to represent those units in twindragon binary (see (@eq-twindragon-units)) we can find the desired twindragon representation using the addition algorithm. For example, to find the twindragon representation of $-3+5i$ we add three copies of the representation of $-1$ (11101) to five copies of the representation of $i$ (11). For those who are interested, the details of finding the representation of $-3+5i$ can be found below.\n<details>\n    <summary>Details</summary>\n\n    Let's see what happens:\n    $$\\begin{array}{cr}\n      & 11101\\\\\n      & 11101\\\\\n      & 11101\\\\\n      &    11\\\\ \n      &    11\\\\ \n      &    11\\\\ \n      &    11\\\\ \n    + &    11\\\\ \n    \\hline\n    \\end{array}$$\n    First, let's shift the bits down in the left three columns for convenience: \n    $$\\begin{array}{cr}\n      &     1\\\\\n      &     1\\\\\n      &     1\\\\\n      &    11\\\\ \n      &    11\\\\ \n      & 11111\\\\ \n      & 11111\\\\ \n    + & 11111\\\\ \n    \\hline\n    \\end{array}$$\n    Now, we can apply a the cancel rule (@eq-cancel-rule) a couple times:\n    $$\n    \\begin{array}{cr}\n      &     1\\\\\n      &     1\\\\\n      &     1\\\\\n      &    11\\\\ \n      &   \\textcolor{#e95420}{ 11}\\\\ \n      & 11\\textcolor{#e95420}{111}\\\\ \n      & 1\\textcolor{blue}{11}11\\\\ \n    + & \\textcolor{blue}{111}11\\\\ \n    \\hline\n    \\end{array}\n    \\quad\\leadsto\\quad\n    \\begin{array}{cr}\n      &     1\\\\\n      &     1\\\\\n      &     1\\\\\n      &    11\\\\ \n      &   \\textcolor{#e95420}{ 00}\\\\ \n      & 11\\textcolor{#e95420}{000}\\\\ \n      & 1\\textcolor{blue}{00}11\\\\ \n    + & \\textcolor{blue}{000}11\\\\ \n    \\hline\n    \\end{array}\n    $$\n    After shifting the bits down again (for convenience) we have:\n    $$\\begin{array}{cr}\n      &     1\\\\\n      &     1\\\\\n      &     1\\\\\n      &    11\\\\ \n      & 10011\\\\ \n    + & 11011\\\\ \n    \\hline\n    \\end{array}$$\n    Next, we apply the carry rule (@eq-carry-rule) one time to the rightmost column to get\n    $$\n    \\begin{array}{cr}\n      &     \\textcolor{#e95420}{1}\\\\\n      &     \\textcolor{#e95420}{1}\\\\\n      &     1\\\\\n      &    11\\\\ \n      & 10011\\\\ \n    + & 11011\\\\ \n    \\hline\n    \\end{array}\n    \\quad\\leadsto\\quad\n    \\begin{array}{cr}\n      & \\textcolor{#e95420}{1100}\\\\\n      &     \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\\n      &     \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\\n      &     1\\\\\n      &    11\\\\ \n      & 10011\\\\ \n    + & 11011\\\\ \n    \\hline\n    \\end{array}$$\n    Dropping bits (and removing crossed out ones) gives the following, where we apply the cancel rule (@eq-cancel-rule):\n    $$\n    \\begin{array}{cr}\n      &     1\\\\\n      &    \\textcolor{#e95420}{11}\\\\ \n      & 11\\textcolor{#e95420}{111}\\\\ \n    + & 11011\\\\ \n    \\hline\n    \\end{array}\n    \\quad\\leadsto\\quad\n    \\begin{array}{cr}\n      &     1\\\\\n      &    \\textcolor{#e95420}{00}\\\\ \n      & 11\\textcolor{#e95420}{000}\\\\ \n    + & 11011\\\\ \n    \\hline\n    \\end{array}\n    $$\n    Let's drop the bits again, and then we apply the carry rule to the right column:\n    $$\n    \\begin{array}{cr}\n    \\\\\n      & 1100\\textcolor{#e95420}{1}\\\\ \n    + & 1101\\textcolor{#e95420}{1}\\\\ \n    \\hline\n    \\end{array}\n    \\quad\\leadsto\\quad\n    \\begin{array}{cr}\n      & \\textcolor{#e95420}{1100}\\\\\n      & 1100\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 1101\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n    \\end{array}\n    $$\n    Now we sum the three rightmost columns to get:\n    $$\n    \\begin{array}{cr}\n      & 1\\textcolor{#aea79f}{100}\\\\\n      & 11\\textcolor{#aea79f}{00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 11\\textcolor{#aea79f}{01\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 110\n    \\end{array}\n    $$\n    The next column requires a carry:\n    $$\n    \\begin{array}{cr}\n      & \\textcolor{#e95420}{1}\\textcolor{#aea79f}{100}\\\\\n      & 1\\textcolor{#e95420}{1}\\textcolor{#aea79f}{00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 11\\textcolor{#aea79f}{01\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 110\n    \\end{array}\n    \\quad\\leadsto\\quad\n    \\begin{array}{cr}\n      & \\textcolor{#e95420}{1100}\\phantom{000}\\\\\n      & \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}100}\\\\\n      & 1\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 11\\textcolor{#aea79f}{01\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 110\n    \\end{array}\n    $$\n    We now add the current column of bits, and then drop the other bits for convenience:\n    $$\n    \\begin{array}{cr}\n      & \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}100}\\\\\n      & 1\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 111\\textcolor{#aea79f}{101\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 1110\n    \\end{array}\n    $$\n    The next column uses a carry rule:\n    $$\n    \\begin{array}{cr}\n      & \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}100}\\\\\n      & \\textcolor{#e95420}{1}\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 11\\textcolor{#e95420}{1}\\textcolor{#aea79f}{101\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 1110\n    \\end{array}\n    \\quad\\leadsto\\quad\n    \\begin{array}{cr}\n      & \\textcolor{#e95420}{1100}\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}100}\\\\\n      & \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 11\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}101\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 1110\n    \\end{array}\n    $$\n    Now we can sum the current column, and the next one. After dropping some bits we are left with\n    $$\n    \\begin{array}{cr}\n      & 1\\textcolor{#aea79f}{0\\hspace{-5.75pt}\\not{1}\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 11\\textcolor{#aea79f}{1\\hspace{-5.75pt}\\not{1}101\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 101110\n    \\end{array}\n    $$\n    One last carry:\n    $$\n    \\begin{array}{cr}\n    \\\\\n      & \\textcolor{#e95420}{1}\\textcolor{#aea79f}{0\\hspace{-5.75pt}\\not{1}\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 1\\textcolor{#e95420}{1}\\textcolor{#aea79f}{1\\hspace{-5.75pt}\\not{1}101\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 101110\n    \\end{array}\n    \\quad\\leadsto\\quad\n    \\begin{array}{cr}\n     & \\textcolor{#e95420}{1100}\\phantom{000000}\\\\\n      & \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}0\\hspace{-5.75pt}\\not{1}\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & 1\\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}1\\hspace{-5.75pt}\\not{1}101\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 101110\n    \\end{array}\n    \\\\\n    $$\n    The rest is clear:\n    $$\n    \\begin{array}{cr}\n     & \\textcolor{#aea79f}{1100}\\phantom{000000}\\\\\n      & \\textcolor{#aea79f}{\\hspace{-5.75pt}\\not{1}0\\hspace{-5.75pt}\\not{1}\\hspace{-5.75pt}\\not{1}00\\hspace{-5.75pt}\\not{1}}\\\\ \n    + & \\textcolor{#aea79f}{1\\hspace{-5.75pt}\\not{1}1\\hspace{-5.75pt}\\not{1}101\\hspace{-5.75pt}\\not{1}}\\\\ \n    \\hline\n      & 1110101110\n    \\end{array}\n    $$\n    Thus, we have found that the twindragon representation of $-3+5i$ is $1110101110$.\n</details>\n\n\n## Twindragons in the complex plane\n\nWe have seen that every Gaussian integer has a twindragon representation. In fact, these representations are unique (it's a fun exercise to prove this). Thus, we have a way to label every point in the lattice of Gaussian integers in the complex plane with a binary string. \n\nIn the following plot, a unit square is drawn around each of the $2^{15}$ Gaussian integers whose twindragon representations use 15 or fewer bits. The color of the square is determined by the length of the binary string: the more bits, the darker the square. For example, 0 is the lightest color; you can find it in the middle of the picture (you can zoom in). The next lightest square is 1, then 10 and 11 are just a little darker, and so on. The darkest squares are the $2^{14}$ Gaussian integers whose twindragon representations are 15 bits long. \n\nAs the color darkens, the corresponding regions in the plane are approaching the beautiful Davis-Knuth dragon, also known as the [twindragon](https://en.wikipedia.org/wiki/Dragon_curve), hence the name of the binary system. \n\n\n```{ojs}\nimport { chart } from \"d/3964d6d505b9f008\"\nchart\n```\n\n\n### A twindragon fractiling\n\nWe can extend the twindragon system from Gaussian integers to all complex numbers by adding fractional parts. For example, we write $101.01$ for the complex number\n$$(i-1)^2 + (i-1)^0 + (i-1)^{-2} = 1-1.5i$$\nWe call $101$ and $0.01$ the *whole* and *fraction* parts of $101.01$, respectively.\nNotice that representations with nonzero fraction parts can indeed have non-integer real or imaginary parts. One can show that every complex number can be represented in twindragon binary if we allow (possibly infinitely long) fraction parts. It should be noted that we no longer get uniqueness of representations after adding fraction parts. \n\nIf we plot all the complex numbers whose twindragon representation have the same fixed whole part, the result is a twindragon. Moreover, all these twindragons (one for each Gaussian integer) tile the complex plane. Such a tiling by fractals is sometimes called a *fractiling.* We can see this twindragon fractiling in the following plot. There we plot each complex number whose twindragon representation has whole part with at most 3 bits, and fraction with at most 13 bits. The color of these $2^{16}$ points corresponds to the whole part as follows:\n\n$$\\begin{array}{|c|cccccccc|}\n\\hline\n\\text{whole part} & 0 & 1 & 10 & 11 & 100 & 101 & 110 & 111\\\\\n\\hline\n\\text{color} & \\textcolor{#ff6961}{\\bullet} & \\textcolor{#ffb480}{\\bullet} & \\textcolor{#f8f38d}{\\bullet} & \\textcolor{#42d6a4}{\\bullet} & \\textcolor{#08cad1}{\\bullet} & \\textcolor{#59adf6}{\\bullet} & \\textcolor{#9d94ff}{\\bullet} & \\textcolor{#c780e8}{\\bullet} \\\\\n\\hline\n\\end{array}$$\n\n\n```{ojs}\nimport { fractionChart } from \"d/526bb5e596bf883a\"\nfractionChart\n```\n\n\n### A twindragon of twindragons\n\nIn the first plot, we used unit squares to represent each Gaussian integer, and those squares nicely tiled the complex plane. However, those squares are not the best picture of the Gaussian integers from the viewpoint of the twindragon. Indeed, the second plot shows that we should really replace those unit squares with \"unit twindragons\", i.e. the collection of all points in the complex plane that share the same whole part. In the final plot below, we plot all complex numbers whose twindragon representation has whole part with at most 11 bits, and fraction part with at most 6 bits. The points are colored according to the length of their whole part (the longer the whole part the darker the point). \n\n\n```{ojs}\nimport { twindragonChart } from \"d/60ea50d21dd08209\"\ntwindragonChart\n```\n\n\n\n\n\n## References\n\nI first learned about the twindragon binary number system and the corresponding fractiling of the complex plane from G. Edgar's book [Measure, Topology, and Fractal Geometry](https://www.amazon.com/Measure-Topology-Geometry-Undergraduate-Mathematics/dp/0387747486). \nThe first appearance the twindragon binary number system is in W. Penny's [A \"Binary\" System for Complex Numbers](https://dl.acm.org/doi/pdf/10.1145/321264.321274). I believe the first connection between the number system and the twindragon fractal is due to D. Knuth: [Number representations and dragon curves](https://www-cs-faculty.stanford.edu/~knuth/fg.html).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}